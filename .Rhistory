setwd("C:/Users/sergi/Stats-Data-Mining")
tinytex::install_tinytex()
install.packages("boot")
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(caTools)
default <- read.csv("DataSets/Default.csv")
default$default <- ifelse(default$default == "Yes", 1, 0)
default$student <- ifelse(default$student == "Yes", 1, 0)
set.seed(0)
defaultFit <- glm(default ~ income + balance, data = default, family = binomial)
summary(defaultFit)
defaultSplit = sample.split(default$default, SplitRatio = 0.625)
trainingSet <- subset(default, defaultSplit == TRUE)
validSet <- subset(default, defaultSplit == FALSE)
defaultLRModel <- glm(default ~ income + balance, data = trainingSet, family = "binomial")
defaultProbability=predict(defaultLRModel, newdata = validSet, type="response")
defaultPrediction <- ifelse(defaultProbability > 0.5, 1, 0)
table(defaultPrediction,validSet$default)
mean(defaultPrediction!=validSet$default) * 100
defaultSplit = sample.split(default$default, SplitRatio = 0.25)
trainingSet <- subset(default, defaultSplit == TRUE)
validSet <- subset(default, defaultSplit == FALSE)
defaultLRModel <- glm(default ~ income + balance, data = trainingSet, family = "binomial")
defaultProbability=predict(defaultLRModel, newdata = validSet, type="response")
defaultPrediction <- ifelse(defaultProbability > 0.5, 1, 0)
table(defaultPrediction,validSet$default)
mean(defaultPrediction!=validSet$default) * 100
defaultSplit = sample.split(default$default, SplitRatio = 0.5)
trainingSet <- subset(default, defaultSplit == TRUE)
validSet <- subset(default, defaultSplit == FALSE)
defaultLRModel <- glm(default ~ income + balance, data = trainingSet, family = "binomial")
defaultProbability=predict(defaultLRModel, newdata = validSet, type="response")
defaultPrediction <- ifelse(defaultProbability > 0.5, 1, 0)
table(defaultPrediction,validSet$default)
mean(defaultPrediction!=validSet$default) * 100
defaultSplit = sample.split(default$default, SplitRatio = 0.75)
trainingSet <- subset(default, defaultSplit == TRUE)
validSet <- subset(default, defaultSplit == FALSE)
defaultLRModel <- glm(default ~ income + balance, data = trainingSet, family = "binomial")
defaultProbability=predict(defaultLRModel, newdata = validSet, type="response")
defaultPrediction <- ifelse(defaultProbability > 0.5, 1, 0)
table(defaultPrediction,validSet$default)
mean(defaultPrediction!=validSet$default) * 100
defaultSplit = sample.split(default$default, SplitRatio = 0.625)
trainingSet <- subset(default, defaultSplit == TRUE)
validSet <- subset(default, defaultSplit == FALSE)
defaultLRModel <- glm(default ~ income + balance + student, data = trainingSet, family = "binomial")
defaultProbability=predict(defaultLRModel, newdata = validSet, type="response")
defaultPrediction <- ifelse(defaultProbability > 0.5, 1, 0)
table(defaultPrediction,validSet$default)
mean(defaultPrediction!=validSet$default) * 100
library(boot)
set.seed(1)
defaultSDE <- glm(default ~ income + balance, data = default, family = binomial)
summary(defaultSDE)$coefficients[2:3,]
boot.fn <- function(data, index)
{
bootData <- data[index, ]
bootFit <- glm(default ~ income + balance, data = bootData, family = binomial)
return(summary(bootFit)$coefficients[2:3,1])
}
boot(default, boot.fn, R=100)
weekly <- read.csv("DataSets/Weekly.csv")
View(weekly)
